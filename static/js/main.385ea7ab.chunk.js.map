{"version":3,"sources":["Managers/Renderer.js","Managers/EntityManager.js","Utils/VRControls.js","App.js","serviceWorker.js","index.js"],"names":["initRenderer","ARUtils","getARDisplay","then","display","vrDisplay","setupRenderer","displayUnsupportedMessage","renderer","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","autoClear","canvas","domElement","document","body","appendChild","arView","ARView","update","scene","camera","updateCallback","clearColor","render","clearDepth","requestAnimationFrame","this","THREE","alpha","entities","ent","push","entity","filter","current","id","name","find","forEach","VRControls","object","onError","vrDisplays","scope","standingMatrix","frameData","VRFrameData","navigator","getVRDisplays","displays","length","catch","console","warn","scale","standing","userHeight","getVRDisplay","setVRDisplay","value","getStandingMatrix","pose","getFrameData","getPose","orientation","quaternion","fromArray","position","set","stageParameters","updateMatrix","sittingToStandingTransform","applyMatrix","setY","y","multiplyScalar","dispose","App","buildCamera","ARPerspectiveCamera","depthNear","depthFar","mainCamera","vrControls","setupScene","geometry","material","color","torus","light","copy","add","start","success","startUpdate","currentInstance","updateProjectionMatrix","entityManager","ref","mount","React","Component","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.385ea7ab.chunk.js","sourcesContent":["import * as THREE from 'three';\nimport { ARUtils, ARView } from 'three.ar.js';\n\nclass Renderer {\n  constructor() {\n    this.renderer = new THREE.WebGLRenderer({ alpha: true });\n  }\n\n  initRenderer = () => {\n    return ARUtils.getARDisplay().then((display) => {\n      if (display) {\n        this.vrDisplay = display;\n        this.setupRenderer();\n        return true;\n      }\n      ARUtils.displayUnsupportedMessage();\n      return false;\n    });\n  }\n\n  setupRenderer = () => {\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.autoClear = false;\n    this.canvas = this.renderer.domElement;\n    document.body.appendChild(this.canvas);\n    this.arView = new ARView(this.vrDisplay, this.renderer);\n  }\n\n  update = (scene, camera, updateCallback) => {\n    this.renderer.clearColor();\n    this.arView.render();\n    this.renderer.clearDepth();\n    this.renderer.render(scene, camera);\n    this.vrDisplay.requestAnimationFrame(updateCallback);\n  }\n}\n\nexport default new Renderer();","class EntityManager {\n    constructor() {\n      this.entities = [];\n    }\n  \n    addEntity(ent) {\n      this.entities.push(ent);\n    }\n  \n    removeEntity(entity) {\n      this.entities.filter((current) => {\n        return current.id !== entity.id;\n      });\n    }\n  \n    findByName(name) {\n      return this.entities.find((ent) => {\n        return ent.name === name;\n      });\n    }\n  \n    getAllEntities() {\n      return this.entities;\n    }\n  \n    update() {\n      this.entities.forEach(entity => entity.update());\n    }\n  }\n  \n  export default new EntityManager();","/* eslint-disable */\n/**\n * @author dmarcos / https://github.com/dmarcos\n * @author mrdoob / http://mrdoob.com\n */\n\nimport * as THREE from 'three';\n\nconst VRControls = function (object, onError) {\n  const scope = this;\n\n  let vrDisplay,\n    vrDisplays;\n\n  const standingMatrix = new THREE.Matrix4();\n\n  let frameData = null;\n\n  if ('VRFrameData' in window) {\n    frameData = new VRFrameData();\n  }\n\n  function gotVRDisplays(displays) {\n    vrDisplays = displays;\n\n    if (displays.length > 0) {\n      vrDisplay = displays[0];\n    } else if (onError) onError('VR input not available.');\n  }\n\n  if (navigator.getVRDisplays) {\n    navigator.getVRDisplays().then(gotVRDisplays).catch(() => {\n      console.warn('THREE.VRControls: Unable to get VR Displays');\n    });\n  }\n\n  // the Rift SDK returns the position in meters\n  // this scale factor allows the user to define how meters\n  // are converted to scene units.\n\n  this.scale = 1;\n\n  // If true will use \"standing space\" coordinate system where y=0 is the\n  // floor and x=0, z=0 is the center of the room.\n  this.standing = false;\n\n  // Distance from the users eyes to the floor in meters. Used when\n  // standing=true but the VRDisplay doesn't provide stageParameters.\n  this.userHeight = 1.6;\n\n  this.getVRDisplay = function () {\n    return vrDisplay;\n  };\n\n  this.setVRDisplay = function (value) {\n    vrDisplay = value;\n  };\n\n  this.getVRDisplays = function () {\n    console.warn('THREE.VRControls: getVRDisplays() is being deprecated.');\n    return vrDisplays;\n  };\n\n  this.getStandingMatrix = function () {\n    return standingMatrix;\n  };\n\n  this.update = function () {\n    if (vrDisplay) {\n      let pose;\n\n      if (vrDisplay.getFrameData) {\n        vrDisplay.getFrameData(frameData);\n        pose = frameData.pose;\n      } else if (vrDisplay.getPose) {\n        pose = vrDisplay.getPose();\n      }\n\n      if (pose.orientation !== null) {\n        object.quaternion.fromArray(pose.orientation);\n      }\n\n      if (pose.position !== null) {\n        object.position.fromArray(pose.position);\n      } else {\n        object.position.set(0, 0, 0);\n      }\n\n      if (this.standing) {\n        if (vrDisplay.stageParameters) {\n          object.updateMatrix();\n\n          standingMatrix.fromArray(vrDisplay.stageParameters.sittingToStandingTransform);\n          object.applyMatrix(standingMatrix);\n        } else {\n          object.position.setY(object.position.y + this.userHeight);\n        }\n      }\n\n      object.position.multiplyScalar(scope.scale);\n    }\n  };\n\n  this.dispose = function () {\n    vrDisplay = null;\n  };\n};\n\nexport default VRControls;","import React from 'react';\nimport  {  ARPerspectiveCamera  }  from  'three.ar.js';\nimport  renderer  from  './Managers/Renderer';\nimport entityManager from './Managers/EntityManager';\nimport  VRControls  from  './Utils/VRControls';\nimport  *  as  THREE  from  'three';\n\nclass App extends React.Component {\n\tcomponentDidMount() {\n\t\tthis.start();\n\t}\n\n\tbuildCamera = () => {\n\t\tconst  camera  =  new  ARPerspectiveCamera(\n\t\t\trenderer.vrDisplay,\n\t\t\t60,\n\t\t\twindow.innerWidth / window.innerHeight,\n\t\t\trenderer.vrDisplay.depthNear,\n\t\t\trenderer.vrDisplay.depthFar\n\t\t\t);\n\t\t\tthis.mainCamera  =  camera;\n\t\t\tthis.vrControls  =  new  VRControls(camera);\n\t}\n\n\tsetupScene = () => {\n\t\tthis.scene  =  new  THREE.Scene();\n\t\tconst  geometry  =  new  THREE.TorusGeometry(0.4,  0.1,  20,  30);\n\t\tconst  material  =  new  THREE.MeshPhongMaterial({ color:  0xff5643  });\n\t\tthis.torus  =  new  THREE.Mesh(geometry,  material);\n\t\tconst  light  =  new  THREE.PointLight(0xff0000,  1,  100);\n\t\tlight.position.set(5, 5, 5);\n\t\tthis.torus.position.copy(new  THREE.Vector3(0,0,-1.5));\n\t\tthis.scene.add(this.torus);\n\t\tthis.scene.add(light);\n\t\tthis.scene.add(this.mainCamera);\n\t}\n\n\tstart = () => {\n\t\trenderer.initRenderer().then((success)  =>  {\n\t\t\tif (success) {\n\t\t\tthis.buildCamera();\n\t\t\tthis.setupScene();\n\t\t\tthis.startUpdate();\n\t\t\t}\n\t\t});\n\t}\n\t\n\tstartUpdate = () =>  {\n\t\tconst  currentInstance  =  this;\n\t\tthis.update = () =>{\n\t\t\tcurrentInstance.mainCamera.updateProjectionMatrix();\n\t\t\tcurrentInstance.vrControls.update();\n\t\t\trenderer.update(currentInstance.scene,  entityManager.mainCamera,  currentInstance.update);\n\t\t};\n\t\tthis.update();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div ref={ref => (this.mount = ref)} />\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}